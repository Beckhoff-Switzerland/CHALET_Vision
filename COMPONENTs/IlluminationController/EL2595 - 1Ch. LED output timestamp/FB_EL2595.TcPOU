<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_EL2595" Id="{815a7e5a-230d-40df-8f77-64f7efcfde1d}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'Do not call the body - Stick to OOP'}
FUNCTION_BLOCK FB_EL2595 EXTENDS FB_IlluminationController_Base IMPLEMENTS I_IlluminationSingleOutput_Mode
VAR
	(*DOX Control*)
	bOutput					AT %Q* 	: BOOL;					// Desired State of Output
	bReset					AT %Q*	: BOOL;					// Terminal reset
	
	(*DC Sync*)
	nStartTime 				AT %Q*	: T_DCTIME64;			// Trigger time stamp
	nActivate				AT %Q*	: USINT; 				// 0 -> 3 use new time in terminal
	
	(*DOX Status*)
	bReadyToActivate		AT %I*	: BOOL := FALSE;		// Terminal ready
	bWarning				AT %I*	: BOOL := FALSE;		// Terminal has warning
	bError					AT %I*	: BOOL := FALSE;		// Terminal has error
	
	(*DC Feedback*)
	nDCFeedback				AT %I*  : USINT := 0;			// Feedback of outputchanel
	

	nImpulseLength 			AT %Q* 	: UDINT := 20000;   	// Impulse length of the lighting period [in 1us]
	nTriggerDelay 			AT %Q* 	: UDINT := 10;			// Delay between lighting and camera trigger [in 100ns]

	{attribute 'hide'}
	eState					: E_StateTerminal;				// Current terminal state
	eTriggerSubState		:(SEQ_WirteTime, SEQ_Activate, SEQ_WaitForFeedback, SEQ_Done); //setting the trigger takes several Ethercat cycles
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Busy" Id="{011661e4-ad5c-4cde-a80e-7b6da8bb24e9}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
//Module already has a task - already a trigger active
PROPERTY Busy : BOOL]]></Declaration>
      <Get Name="Get" Id="{fff6d4b9-f582-41bf-a35d-2688bd5abe6a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := (THIS^.eState = E_StateTerminal.TRIGGERING);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Duration_1us" Id="{e9158780-1de3-448e-8a61-7b1af690333f}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Duration_1us : UDINT]]></Declaration>
      <Get Name="Get" Id="{02f5517d-2306-42b8-9655-034ff37da25d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Duration_1us := THIS^.nImpulseLength;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{873113ff-c8b0-4e5c-84aa-9a136028c713}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.nImpulseLength := Duration_1us;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Operational" Id="{02cc84ae-8a6b-4cd9-a9a3-22bca6c0a6a4}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Operational : BOOL]]></Declaration>
      <Get Name="Get" Id="{7d06f281-92bd-49ee-99a6-4850dd6da388}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Operational := (THIS^.eState = E_StateTerminal.READY) OR (THIS^.eState = E_StateTerminal.TRIGGERING);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{58c1846a-0a8d-4269-addc-a521503b7c59}">
      <Declaration><![CDATA[METHOD PUBLIC Reset : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT THIS^.Operational THEN
	THIS^.eState := E_StateTerminal.RESET;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Property Name="State" Id="{ecb4fecd-45fb-4cea-9ee6-46d8bcecdd76}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY PUBLIC State : E_StateTerminal]]></Declaration>
      <Get Name="Get" Id="{5a68018b-a251-4aa7-b1d4-89eaa6b6ac8e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State := THIS^.eState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Trigger" Id="{334a3bad-68a8-4cb9-83d8-2d1779f5af01}">
      <Declaration><![CDATA[METHOD PUBLIC Trigger : HRESULT
VAR_INPUT
	//The data type T_DCTIME64 represents the distributed clock system time (abbreviated as DC time) as a linear 64-bit integer value. 
	//The time is expressed in nanoseconds since 1/1/2000 UTC. The smallest unit is a nanosecond.
	//F_GetCurDcTickTime64()
	nDCTimeStamp	: T_DCTIME64;
END_VAR
VAR
	nEarliestPossibleDCTime : T_DCTIME64;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Check if the trigger is minimum 3 EtherCat cycles in future *)
nEarliestPossibleDCTime := F_GetCurDcTaskTime64()(*1ns*) + THIS^.ipVisionSystem.TaskCycleTimeNs * 3 (*Cycles*);
IF nDCTimeStamp < nEarliestPossibleDCTime THEN
	Trigger := E_FAIL;
	RETURN;
END_IF

(* Check if not in wrong state *)
IF NOT (THIS^.eState = E_StateTerminal.READY) THEN
	Trigger := E_FAIL;
	RETURN;
END_IF




THIS^.nStartTime := nDCTimeStamp;
THIS^.bOutput := TRUE;
THIS^.nActivate := 0;

THIS^.eTriggerSubState := SEQ_WirteTime;
THIS^.eState := E_StateTerminal.TRIGGERING;
Trigger := S_OK;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update" Id="{612f7be6-9d5e-41e2-8748-647edf2ee5b4}">
      <Declaration><![CDATA[METHOD PUBLIC Update : HRESULT
VAR_INST
	fbTimeout : TON;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Check for terminal errors *)
IF THIS^.bError AND NOT (THIS^.eState = E_StateTerminal.RESET) THEN 
	THIS^.eState := E_StateTerminal.ERROR;
END_IF

(* Handle terminal state machine *)
CASE THIS^.eState OF
	(* Reset all control variables *)
	E_StateTerminal.RESET:
		THIS^.bReset := TRUE;
		THIS^.eState := E_StateTerminal.RESETING;
		
	(* Reset all control variables *)
	E_StateTerminal.RESETING:
		THIS^.bReset := FALSE;
		THIS^.eState := E_StateTerminal.INIT;	
		
	(* Enable terminal if ready *)
	E_StateTerminal.INIT:			
		IF THIS^.bReadyToActivate THEN
			THIS^.bReset := FALSE;
			THIS^.fbAlarmGeneral.Clear(0, TRUE);
			THIS^.eState := E_StateTerminal.READY;
		END_IF
	
	(* Terminal is ready *)
	E_StateTerminal.READY:
		THIS^.nStartTime := 0;
		THIS^.bOutput := FALSE;
		THIS^.nActivate := 0;

	(* Terminal is triggering *)
	E_StateTerminal.TRIGGERING:
		CASE eTriggerSubState OF
			SEQ_WirteTime:
				//Wirte TimeStamp, Output and Activate=0 in .Trigger()
				//The next commands are allowed only in the next Ethercat cycle
				eTriggerSubState := SEQ_Activate;
				
			SEQ_Activate:
				// Activate new time
				THIS^.nActivate := 3;
				eTriggerSubState := SEQ_WaitForFeedback;
				
			SEQ_WaitForFeedback:
				// Trigger is done and PulsOffTime is done
				IF ((F_GetCurDcTaskTime64()(*100ns*) > THIS^.nStartTime) AND THIS^.bReadyToActivate) THEN
					THIS^.nActivate := 0;
					eTriggerSubState := SEQ_Done;
					//Ready for next Trigger
					THIS^.eState := E_StateTerminal.READY;
				END_IF

			SEQ_Done:
			;
		END_CASE
	
	
	(* Error occured *)	
	E_StateTerminal.ERROR:
		IF NOT THIS^.fbAlarmGeneral.bRaised THEN
			THIS^.fbAlarmGeneral.Raise(0);	
		END_IF
		
		IF (THIS^.fbAlarmGeneral.eConfirmationState = TcEventConfirmationState.Confirmed) THEN
			THIS^.Reset();			
		END_IF			
END_CASE

(* Timeout if an state is to long active *)
fbTimeout.IN := (THIS^.eState = E_StateTerminal.INIT) OR (THIS^.eState = E_StateTerminal.RESETING) OR (THIS^.eState = E_StateTerminal.TRIGGERING);
fbTimeout.PT := T#5S;
fbTimeout();
IF fbTimeout.Q THEN
	THIS^.eState := E_StateTerminal.ERROR;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>