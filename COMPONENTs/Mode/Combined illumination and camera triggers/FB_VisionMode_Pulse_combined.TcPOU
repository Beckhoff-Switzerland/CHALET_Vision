<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_VisionMode_Pulse_combined" Id="{9b5faf74-0f0c-4203-b466-f3c83f2759e2}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := '[FB_VisionMode_Pulse] Do not call the body - Stick to OOP'}
//Pulse - A trigger activates an image acquisition with simultaneous triggering of the lighting 
FUNCTION_BLOCK FB_VisionMode_Pulse_combined EXTENDS FB_VisionMode_Base IMPLEMENTS I_VisionMode_Pulse_combined
VAR
	{attribute 'hide'}
	bInitDone : BOOL;
	{attribute 'hide'}
	nLastTriggerTime : T_DCTIME64;
	
	(* Supported/requested interfaces. Minimum one must be supported per ImageProvider/CameraController/IlluminationController *)
	(* ImageProvider *)
	ipGigeVision_Mode 	: I_GigEVision_Mode;	
	ipImageFromFile_Mode	: I_ImageFromFile_Mode;	
	
	(* Supported/requested interfaces. Minimum one must be supported per ImageProvider/CameraController/IlluminationController *)
	(* CameraController *)
	ipHwTimestamp_Mode 		: I_HwTimestamp_Mode;
	ipSwTimestamp_Mode		: I_SwTimestamp_Mode;
	ipGigeSoftwaretrigger 	: I_GigeSoftTrigger_Mode;
	
	(* Supported/requested interfaces. Minimum one must be supported per ImageProvider/CameraController/IlluminationController *)
	(* lluminationController 1 *)
	ipVIx2000_Mode_1 		: I_VIx2000_Mode;
	ipSingleOutput_Mode_1 	: I_IlluminationSingleOutput_Mode;
		
	(* Supported/requested interfaces. Minimum one must be supported per ImageProvider/CameraController/IlluminationController *)
	(* lluminationController 2 *)
	ipVIx2000_Mode_2 	: I_VIx2000_Mode;
	ipSingleOutput_Mode_2 	: I_IlluminationSingleOutput_Mode;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Configure" Id="{4b6e6c3f-b75c-425d-be85-d2efed26f3ac}">
      <Declaration><![CDATA[METHOD Configure : HRESULT
VAR_INPUT
	nOrange 	: UINT(0..511); //0-511
	nGreen 		: UINT(0..511); //0-511
	nBlue 		: UINT(0..511); //0-511
	nInfrared 	: UINT(0..511); //0-511
//	nExposureDelay_100ns : UDINT;	//Camera start at triggertime, illumination starts this time earlier
	nExposure_1us : UDINT;			//Camera 
	nIlluminationDuration_1us: UDINT;
	nIlluminationOverride : USINT(1..100); // 1-100
END_VAR
VAR
	hr : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitDone THEN
	Configure := E_FAIL;
	RETURN;
END_IF	


(* CameraController *)
(* Decide here how the hardware is to be controlled based on the interface that was found *)
IF ipHwTimestamp_Mode <> 0 THEN
//	ipHwTimestamp_Mode.TriggerDelay_1ns := nExposureDelay_100ns; zzz clean up
	ipHwTimestamp_Mode.Duration_1us := nExposure_1us;// + TO_UDINT(nExposureDelay_100ns/10); //exposure + warm up time
END_IF

IF ipSwTimestamp_Mode <> 0 THEN
//	ipSwTimestamp_Mode.TriggerDelay_1ns := nExposureDelay_100ns;
END_IF

IF ipGigeSoftwaretrigger <> 0 THEN
	ipGigeSoftwaretrigger.GigeCamera := ipGigeVision_Mode;
//	ipGigeSoftwaretrigger.TriggerDelay_1ns := nExposureDelay_100ns;
END_IF
 


(* ImageProvider *)
(* Decide here how the hardware is to be controlled based on the interface that was found *)
IF ipGigeVision_Mode <> 0 THEN
	ipGigeVision_Mode.Exposure_1us := nExposure_1us;
END_IF




(* lluminationController1 *)
(* Decide here how the hardware is to be controlled based on the interface that was found *)
IF ipVIx2000_Mode_1 <> 0 THEN
	hr := GetMostSignificant(hr, ipVIx2000_Mode_1.Configure(
															nOrange		:= (nOrange*nIlluminationOverride/100), 
															nGreen		:= (nGreen*nIlluminationOverride/100), 
															nBlue		:= (nBlue*nIlluminationOverride/100), 
															nInfrared	:= (nInfrared*nIlluminationOverride/100), 
															nDuration_1us:= nIlluminationDuration_1us));
END_IF




(* lluminationController2 *)
(* Decide here how the hardware is to be controlled based on the interface that was found *)
IF ipVIx2000_Mode_2 <> 0 THEN
	hr := GetMostSignificant(hr, ipVIx2000_Mode_2.Configure(
															nOrange		:= (nOrange*nIlluminationOverride/100), 
															nGreen		:= (nGreen*nIlluminationOverride/100), 
															nBlue		:= (nBlue*nIlluminationOverride/100), 
															nInfrared	:= (nInfrared*nIlluminationOverride/100), 
															nDuration_1us:= nIlluminationDuration_1us));
END_IF



Configure := hr;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{493dd8ef-37e1-4ac7-87ff-0809226c9419}">
      <Declaration><![CDATA[METHOD Initialize : HRESULT
VAR 
	bSupportedCameraController, bSupportedlluminationController1, bSupportedlluminationController2, bSupportedlImageProvider : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
(* CameraController *)
bSupportedCameraController := 	ToHwTimestamp_Mode(ipCameraController, ipHwTimestamp_Mode)
							OR 	ToSwTimestamp_Mode(ipCameraController, ipSwTimestamp_Mode)
							OR 	(ToImageFromFile_Mode(ipImageProvider, ipImageFromFile_Mode) AND ipCameraController=0)	//No Cameracontrolle is allowed if ImageFromFile	
							OR (ToGigeSoftTrigger_Mode(ipCameraController, ipGigeSoftwaretrigger) AND ToGigEVision_Mode(ipImageProvider, ipGigeVision_Mode));//GigE Softtrigger requires a GigE ImageProvider
							// OR ...

							
(* ImageProvider *)
bSupportedlImageProvider := ToGigEVision_Mode(ipImageProvider, ipGigeVision_Mode)	
						 OR ToImageFromFile_Mode(ipImageProvider, ipImageFromFile_Mode); 
							// OR ...

							
(* lluminationController1 *)
bSupportedlluminationController1 := 	ToVIx2000_Mode(ipIlluminationController1, ipVIx2000_Mode_1)
									OR 	ToIlluminationSingleOutput_Mode(ipIlluminationController1, ipSingleOutput_Mode_1)
									OR 	(ipIlluminationController1 = 0); //Ilumination1+2 is optional -> Empty or valide
									// OR ...

									
(* lluminationController2 *)
bSupportedlluminationController2 := 	ToVIx2000_Mode(ipIlluminationController2, ipVIx2000_Mode_2)
									OR 	ToIlluminationSingleOutput_Mode(ipIlluminationController2, ipSingleOutput_Mode_2)
									OR 	(ipIlluminationController2 = 0); //Ilumination1+2 is optional -> Empty or valide
									// OR ...

									

bInitDone := bSupportedCameraController AND bSupportedlImageProvider AND bSupportedlluminationController1 AND bSupportedlluminationController2;


IF bInitDone THEN 
	Initialize := S_OK;
ELSE
	Initialize := E_FAIL;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="LastTriggerTime" Id="{b5fee0df-997f-4e7e-bf15-a4d6626bb22f}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY LastTriggerTime : T_DCTIME64]]></Declaration>
      <Get Name="Get" Id="{b18bba66-4b87-43bc-92af-2d59cc6188b0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[LastTriggerTime := nLastTriggerTime;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Name" Id="{4ed351d5-45e6-4acd-bd5a-4215b21bee04}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
// Name or description of this mode
PROPERTY Name : STRING]]></Declaration>
      <Get Name="Get" Id="{95da294d-8b21-47b6-a715-7518b371b293}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Name := 'Acquisition with simultaneous triggering of the lighting';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TriggerAtDcTime" Id="{561ac01c-11b4-4b76-94b8-45c8caf2ff07}">
      <Declaration><![CDATA[METHOD TriggerAtDcTime : HRESULT
VAR_INPUT
	//The data type T_DCTIME64 represents the distributed clock system time (abbreviated as DC time) as a linear 64-bit integer value. 
	//The time is expressed in nanoseconds since 1/1/2000 UTC. The smallest unit is a nanosecond.
	//F_GetCurDcTickTime64()
	nDCTimeStamp	: T_DCTIME64;
END_VAR
VAR
	hr : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitDone THEN
	TriggerAtDcTime := E_FAIL;
	RETURN;
END_IF	

(* Check if the trigger is minimum 3 EtherCat cycles in future *)
IF NOT (nDCTimeStamp >= THIS^.NextPossibleTriggerTime) THEN
	TriggerAtDcTime := E_FAIL;
	RETURN;
END_IF


(* CameraController *)
(* Decide here how the hardware is to be controlled based on the interface that was found *)
IF ipHwTimestamp_Mode <> 0 THEN
	hr := GetMostSignificant(hr, ipHwTimestamp_Mode.Trigger(nDCTimeStamp));
END_IF
IF ipSwTimestamp_Mode <> 0 THEN
	hr := GetMostSignificant(hr, ipSwTimestamp_Mode.Trigger(nDCTimeStamp));
END_IF
IF ipGigeSoftwaretrigger <> 0 THEN
	hr := GetMostSignificant(hr, ipGigeSoftwaretrigger.Trigger(nDCTimeStamp));
END_IF



(* ImageProvider *)
IF ipImageFromFile_Mode <> 0 THEN
	hr := GetMostSignificant(hr, ipImageFromFile_Mode.Trigger(nDCTimeStamp));
END_IF



(* lluminationController1 *)
(* Decide here how the hardware is to be controlled based on the interface that was found *)
IF ipVIx2000_Mode_1 <> 0 THEN
	hr := GetMostSignificant(hr, ipVIx2000_Mode_1.Trigger(nDCTimeStamp));
END_IF
IF ipSingleOutput_Mode_1 <> 0 THEN
	hr := GetMostSignificant(hr, ipSingleOutput_Mode_1.Trigger(nDCTimeStamp));
END_IF



(* lluminationController2 *)
(* Decide here how the hardware is to be controlled based on the interface that was found *)
IF ipVIx2000_Mode_2 <> 0 THEN
	hr := GetMostSignificant(hr, ipVIx2000_Mode_2.Trigger(nDCTimeStamp));
END_IF
IF ipSingleOutput_Mode_2 <> 0 THEN
	hr := GetMostSignificant(hr, ipSingleOutput_Mode_2.Trigger(nDCTimeStamp));
END_IF

IF hr = S_OK THEN
	THIS^.nLastTriggerTime := nDCTimeStamp;
END_IF

TriggerAtDcTime := hr;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerNow" Id="{4409f7d4-1618-4376-9f02-bdb403788fdc}">
      <Declaration><![CDATA[METHOD TriggerNow : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Trigger the vision system *)
TriggerNow := THIS^.TriggerAtDcTime(nDCTimeStamp := THIS^.NextPossibleTriggerTime);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>