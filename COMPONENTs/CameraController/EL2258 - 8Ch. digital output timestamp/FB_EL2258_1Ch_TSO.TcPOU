<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_EL2258_1Ch_TSO" Id="{51743aa6-70d1-42f6-8c22-fb4cf2003a96}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'Do not call the body - Stick to OOP'}
FUNCTION_BLOCK FB_EL2258_1Ch_TSO EXTENDS FB_CameraController_Base IMPLEMENTS I_HwTimestamp_Mode
VAR
	bOutput					AT %Q* 	: BOOL;					// Desired State of Output
	nStartTime 				AT %Q*	: T_DCTIME64;			// Trigger time stamp
	nActivate				AT %Q*	: USINT; 				// 0 -> 3 use new time in terminal
	
	nImpulseLength 			: UDINT := 20000;   	// Impulse length of the lighting period [in 1us]	
	nTriggerDelay 			: UDINT := 0;			// The given trigger time is delayed by this value. E.g. to wait for the maximum lighting value before taking a picture  [in 1ns]
	{attribute 'hide'}
	eState					: E_StateTerminal;				// Current terminal state
	eTriggerSubState		:(SEQ_WirteTime, SEQ_Activate, SEQ_WaitForTriggerDone, SEQ_TriggerOff, SEQ_Deactivate, SEQ_Done); //setting the trigger takes several Ethercat cycles
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Busy" Id="{1b9cf1fc-7f7c-490a-8452-f2d845f9a4e3}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
//Module already has a task - already a trigger active
PROPERTY Busy : BOOL]]></Declaration>
      <Get Name="Get" Id="{4356ab16-c60a-4211-bf7e-be3231299854}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := (THIS^.eState = E_StateTerminal.TRIGGERING) OR (THIS^.eState = E_StateTerminal.RESETING) OR (THIS^.eState = E_StateTerminal.RESET);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Duration_1us" Id="{2be0c894-f6ae-40f3-88dd-1e1559d1199b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Duration_1us : UDINT]]></Declaration>
      <Get Name="Get" Id="{416c91a8-3fc0-4451-a4f5-8867317b439c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Duration_1us := THIS^.nImpulseLength;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{244946b1-a0ed-4835-b396-d06304300c6d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.nImpulseLength := Duration_1us;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Operational" Id="{832090c9-93a0-43ee-89a6-7610471bc3d0}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Operational : BOOL]]></Declaration>
      <Get Name="Get" Id="{c47fd861-fed9-41f0-80c9-3095591835b1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Operational := (THIS^.eState = E_StateTerminal.READY) OR (THIS^.eState = E_StateTerminal.TRIGGERING);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{b61bde0b-700b-4ae1-9429-a40e871dde76}">
      <Declaration><![CDATA[METHOD PUBLIC Reset : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.eState = E_StateTerminal.ERROR THEN
	fbFeedback.ActiveCommand := 'Reset';
	fbFeedback.Busy := TRUE;	
	
	THIS^.eState := E_StateTerminal.RESET;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Property Name="State" Id="{5dc1daa8-5156-4892-b00f-aea9cca1f558}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY PUBLIC State : E_StateTerminal]]></Declaration>
      <Get Name="Get" Id="{83aac093-97cb-4a89-a12d-f413e8e95361}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State := THIS^.eState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Trigger" Id="{c1b0b059-d564-4d8a-ae61-c619aa25e993}">
      <Declaration><![CDATA[METHOD PUBLIC Trigger : HRESULT
VAR_INPUT
	//The data type T_DCTIME64 represents the distributed clock system time (abbreviated as DC time) as a linear 64-bit integer value. 
	//The time is expressed in nanoseconds since 1/1/2000 UTC. The smallest unit is a nanosecond.
	//F_GetCurDcTickTime64()
	nDCTimeStamp	: T_DCTIME64;
END_VAR
VAR
	nEarliestPossibleDCTime : T_DCTIME64;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Check if the trigger is minimum 3 EtherCat cycles in future *)
nEarliestPossibleDCTime := F_GetCurDcTaskTime64()(*1ns*) + THIS^.ipVisionSystem.TaskCycleTimeNs * 3 (*Cycles*);
IF nDCTimeStamp < nEarliestPossibleDCTime THEN
	Trigger := E_FAIL;
	RETURN;
END_IF

(* Check if not in wrong state *)
IF NOT (THIS^.eState = E_StateTerminal.READY) THEN
	Trigger := E_FAIL;
	RETURN;
END_IF

fbFeedback.ActiveCommand := 'Trigger';
fbFeedback.Busy := TRUE;	


THIS^.nStartTime := nDCTimeStamp + THIS^.nTriggerDelay;
THIS^.bOutput := TRUE;
THIS^.nActivate := 0;

THIS^.eTriggerSubState := SEQ_WirteTime;
THIS^.eState := E_StateTerminal.TRIGGERING;
Trigger := S_OK;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="TriggerDelay_1ns" Id="{4db9a689-77b8-435a-aee6-ab7dc97f450f}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
// The given trigger time is delayed by this value. E.g. to wait for the maximum lighting value before taking a picture  [in 1ns]
PROPERTY TriggerDelay_1ns : UDINT]]></Declaration>
      <Get Name="Get" Id="{79fdcd63-86e1-4d90-b524-8f619b112ad9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TriggerDelay_1ns := THIS^.nTriggerDelay;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e9582b16-2368-4ab4-b5f8-f5a0aea5a5e0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.nTriggerDelay := TriggerDelay_1ns;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Update" Id="{5d613996-4022-4c22-a5e8-0a5555483c96}">
      <Declaration><![CDATA[METHOD PUBLIC Update : HRESULT
VAR_INST
	fbTimeout : TON;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Check for terminal errors *)
//IF THIS^.bError AND NOT (THIS^.eState = E_StateTerminal.RESET) THEN 
//	THIS^.eState := E_StateTerminal.ERROR;
//END_IF

(* Handle terminal state machine *)
CASE THIS^.eState OF
	(* Reset all control variables *)
	E_StateTerminal.RESET:
		THIS^.eState := E_StateTerminal.RESETING;
		
	(* Reset all control variables *)
	E_StateTerminal.RESETING:
		THIS^.eState := E_StateTerminal.INIT;	
		
	(* Enable terminal if ready *)
	E_StateTerminal.INIT:			
		THIS^.eState := E_StateTerminal.READY;

	
	(* Terminal is ready *)
	E_StateTerminal.READY:
		fbFeedback.Done := TRUE;	
		
		THIS^.nStartTime := 0;
		THIS^.bOutput := FALSE;
		THIS^.nActivate := 0;
		
	(* Terminal is triggering *)
	E_StateTerminal.TRIGGERING:
		CASE eTriggerSubState OF
			SEQ_WirteTime:
				//Wirte TimeStamp, Output and Activate=0 in .Trigger()
				//The next commands are allowed only in the next Ethercat cycle
				eTriggerSubState := SEQ_Activate;
				
			SEQ_Activate:
				// Activate new time
				THIS^.nActivate := 3;
				eTriggerSubState := SEQ_WaitForTriggerDone;
				
			SEQ_WaitForTriggerDone:
				// Trigger is done and PulsOffTime is done
				IF (F_GetCurDcTaskTime64() >= (THIS^.nStartTime + (THIS^.nImpulseLength*1000)(*1ns*))) THEN
					THIS^.bOutput := FALSE;
					THIS^.nActivate := 0;
					eTriggerSubState := SEQ_TriggerOff;
				END_IF
				
			SEQ_TriggerOff:	
				THIS^.nActivate := 3;
				eTriggerSubState := SEQ_Deactivate;
				
			SEQ_Deactivate:	
				IF (F_GetCurDcTaskTime64()(*1ns*) > THIS^.nStartTime) THEN
					eTriggerSubState := SEQ_Done;
					//Ready for next Trigger
					THIS^.eState := E_StateTerminal.READY;
				END_IF

				
			SEQ_Done:
			;
		END_CASE
	
	
	(* Error occured *)	
	E_StateTerminal.ERROR:
		fbFeedback.HR := E_FAIL;	
		IF NOT THIS^.fbAlarmGeneral.bRaised THEN
			THIS^.fbAlarmGeneral.Raise(0);	
		END_IF
		
		IF (THIS^.fbAlarmGeneral.eConfirmationState = TcEventConfirmationState.Confirmed) THEN
			THIS^.Reset();			
		END_IF			
END_CASE

(* Timeout if an state is to long active *)
fbTimeout.IN := (THIS^.eState = E_StateTerminal.INIT) OR (THIS^.eState = E_StateTerminal.RESETING) OR (THIS^.eState = E_StateTerminal.TRIGGERING);
fbTimeout.PT := T#5S;
fbTimeout();
IF fbTimeout.Q THEN
	THIS^.eState := E_StateTerminal.ERROR;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>